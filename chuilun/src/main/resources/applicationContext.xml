<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--使用注解-->
    <context:annotation-config/>
    <!--扫描service中注解-->
    <context:component-scan base-package="com.jns.service"/>
    <!--引入配置文件-->
    <context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>
    <!--数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="jdbc:mysql://39.105.66.68:3306/data?useSSL=false&amp;characterEncoding=UTF-8" />
        <property name="username" value="root" />
        <property name="password" value="225510zZ@" />
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3" />
        <property name="minIdle" value="3" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>


    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="typeAliasesPackage"  value="com.jns.entity"/>
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- spring与mybatis整合配置，扫描所有dao，在单数据源的情况下可以不写sqlSessionFactoryBeanName -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jns.mapper"/>
    </bean>



    <!--spring 集成缓存服务器（memcached） -->
    <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"
          factory-method="getInstance" init-method="initialize"
          destroy-method="shutDown">
        <constructor-arg>
            <value>memCachedPool</value>
        </constructor-arg>
        <!--设置缓存服务器列表，当使用分布式缓存的时，可以指定多个缓存服务器-->
        <property name="servers">
            <list>
                <value>${memcache.server}</value>
            </list>
        </property>
        <!--初始连接数-->
        <property name="initConn">
            <value>${memcache.initConn}</value>
        </property>
        <!--最小连接数-->
        <property name="minConn">
            <value>${memcache.minConn}</value>
        </property>
        <!--最大连接数-->
        <property name="maxConn">
            <value>${memcache.maxConn}</value>
        </property>
        <!--设置主线程的睡眠时间-->
        <property name="maintSleep">
            <value>${memcache.maintSleep}</value>
        </property>
        <!--nagle算法-->
        <property name="nagle">
            <value>${memcache.nagle}</value>
        </property>

        <property name="socketTO">
            <value>${memcache.socketTO}</value>
        </property>
    </bean>

    <bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
        <!--属性-->
        <constructor-arg>
            <value>memCachedPool</value>
        </constructor-arg>
    </bean>
</beans>
